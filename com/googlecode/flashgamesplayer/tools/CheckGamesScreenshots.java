/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * CheckGamesScreenshots.java
 *
 * Created on 21 Ιουλ 2010, 12:37:43 μμ
 */

package com.googlecode.flashgamesplayer.tools;

import com.googlecode.flashgamesplayer.database.Game;
import com.googlecode.flashgamesplayer.database.Options;
import java.io.File;
import java.util.ArrayList;
import java.util.Iterator;

/**
 *
 * @author ssoldatos
 */
public class CheckGamesScreenshots extends MyDraggable {

    /** Creates new form CheckGamesScreenshots */
    public CheckGamesScreenshots() {
        initComponents();
        setLocationRelativeTo(null);
        CheckScreenshots ch = new CheckScreenshots();
        Thread t = new Thread(ch);
        t.start();
        setVisible(true);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    jPanel1 = new javax.swing.JPanel();
    jLabel1 = new javax.swing.JLabel();
    pr_scr = new javax.swing.JProgressBar();

    setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);

    jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));

    jLabel1.setFont(jLabel1.getFont().deriveFont(jLabel1.getFont().getStyle() | java.awt.Font.BOLD, jLabel1.getFont().getSize()+2));
    jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
    jLabel1.setText("Check Games Screenshots");

    pr_scr.setStringPainted(true);

    javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
    jPanel1.setLayout(jPanel1Layout);
    jPanel1Layout.setHorizontalGroup(
      jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(jPanel1Layout.createSequentialGroup()
        .addContainerGap()
        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addComponent(pr_scr, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 314, Short.MAX_VALUE)
          .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 314, Short.MAX_VALUE))
        .addContainerGap())
    );
    jPanel1Layout.setVerticalGroup(
      jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(jPanel1Layout.createSequentialGroup()
        .addContainerGap()
        .addComponent(jLabel1)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(pr_scr, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addContainerGap(26, Short.MAX_VALUE))
    );

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
    );

    pack();
  }// </editor-fold>//GEN-END:initComponents

    

  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JLabel jLabel1;
  private javax.swing.JPanel jPanel1;
  private javax.swing.JProgressBar pr_scr;
  // End of variables declaration//GEN-END:variables
class CheckScreenshots implements Runnable {

  private int checked;
  private int with;
  private int without;
  private ArrayList<Game> games = new ArrayList<Game>();

  public CheckScreenshots() {
    games = Game.getAllGames();
    checked = games.size();

  }

  @Override
  public void run() {
     
    pr_scr.setValue(0);
    for (Iterator<Game> it = games.iterator(); it.hasNext();) {
      Game game = it.next();
      File scr = new File(Options.USER_DIR + Options.SCREENSHOT_DIR + game.getId() + ".png");
      if (scr.exists()) {
        with++;
        if(game.getScreenshot()==Game.NO_SCREENSHOT){
        game.setScreenshot(Game.SCREENSHOT);
        }
      } else {
        without++;
        if(game.getScreenshot()==Game.SCREENSHOT){
        game.setScreenshot(Game.NO_SCREENSHOT);
        }
      }
      pr_scr.setValue(((with + without)*100)/checked);
    }
    dispose();
    MyMessages.message("Check Screenshots",
        "Games checked: " + checked + "\n"
        + "With Screenshot: " + with + "\n"
        + "Without Screenshot: " + without);
  }
}
}
