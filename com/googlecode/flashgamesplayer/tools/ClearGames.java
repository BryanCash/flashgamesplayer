/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * ClearGames.java
 *
 * Created on 20 Ιουλ 2010, 8:46:26 μμ
 */
package com.googlecode.flashgamesplayer.tools;

import com.googlecode.flashgamesplayer.FlashGamesPlayer;
import com.googlecode.flashgamesplayer.database.Game;
import com.googlecode.flashgamesplayer.database.Options;
import java.io.File;
import java.io.FilenameFilter;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author ssoldatos
 */
public class ClearGames extends MyDraggable {

  /** Creates new form ClearGames */
  public ClearGames() {
    initComponents();
    setLocationRelativeTo(null);
    setVisible(true);
  }

  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    jPanel1 = new javax.swing.JPanel();
    jLabel1 = new javax.swing.JLabel();
    bt_clear = new javax.swing.JButton();
    bt_cancel = new javax.swing.JButton();
    pr_swf = new javax.swing.JProgressBar();
    pr_screenshots = new javax.swing.JProgressBar();
    pr_games = new javax.swing.JProgressBar();
    cb_swf = new javax.swing.JCheckBox();
    cb_screenshots = new javax.swing.JCheckBox();
    cb_games = new javax.swing.JCheckBox();

    setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);

    jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));

    jLabel1.setFont(jLabel1.getFont().deriveFont(jLabel1.getFont().getStyle() | java.awt.Font.BOLD, jLabel1.getFont().getSize()+2));
    jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
    jLabel1.setText("Clear Games");

    bt_clear.setText("Clear");
    bt_clear.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        bt_clearActionPerformed(evt);
      }
    });

    bt_cancel.setText("Cancel");
    bt_cancel.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        bt_cancelActionPerformed(evt);
      }
    });

    pr_swf.setStringPainted(true);

    pr_screenshots.setStringPainted(true);

    pr_games.setStringPainted(true);

    cb_swf.setSelected(true);
    cb_swf.setText("Delete swf");

    cb_screenshots.setSelected(true);
    cb_screenshots.setText(" Delete screenshots");

    cb_games.setSelected(true);
    cb_games.setText("Delete games");

    javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
    jPanel1.setLayout(jPanel1Layout);
    jPanel1Layout.setHorizontalGroup(
      jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(jPanel1Layout.createSequentialGroup()
        .addContainerGap()
        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 349, Short.MAX_VALUE)
          .addGroup(jPanel1Layout.createSequentialGroup()
            .addComponent(bt_clear)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(bt_cancel))
          .addGroup(jPanel1Layout.createSequentialGroup()
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
              .addComponent(cb_swf, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
              .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(cb_games, javax.swing.GroupLayout.DEFAULT_SIZE, 133, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED))
              .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                .addComponent(cb_screenshots)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
              .addGroup(jPanel1Layout.createSequentialGroup()
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(pr_swf, javax.swing.GroupLayout.DEFAULT_SIZE, 210, Short.MAX_VALUE))
              .addComponent(pr_screenshots, javax.swing.GroupLayout.DEFAULT_SIZE, 210, Short.MAX_VALUE)
              .addComponent(pr_games, javax.swing.GroupLayout.DEFAULT_SIZE, 210, Short.MAX_VALUE))))
        .addContainerGap())
    );
    jPanel1Layout.setVerticalGroup(
      jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(jPanel1Layout.createSequentialGroup()
        .addContainerGap()
        .addComponent(jLabel1)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(pr_swf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(cb_swf))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(pr_screenshots, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(cb_screenshots))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(pr_games, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(cb_games))
        .addGap(18, 18, 18)
        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(bt_clear)
          .addComponent(bt_cancel))
        .addContainerGap(12, Short.MAX_VALUE))
    );

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
    );

    pack();
  }// </editor-fold>//GEN-END:initComponents

    private void bt_clearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bt_clearActionPerformed
      int a = MyMessages.question("Clear Games", "Do you really want to clear the games?\n"
          + "This will:\n"
          + (cb_swf.isSelected() ? "Delete swf files that don't belong to games in the database\n" : " ")
          + (cb_screenshots.isSelected() ? "Delete screenshots that don't belong to games in the database\n" : " ")
          + (cb_games.isSelected() ? "Delete games from the database that their swf files don't exist" : ""));
      if (a == JOptionPane.YES_OPTION) {

        DeleteSwf dswf = new DeleteSwf();

        Thread t = new Thread(dswf);
        t.start();

      } else {
      }

    }//GEN-LAST:event_bt_clearActionPerformed

    private void bt_cancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bt_cancelActionPerformed
      dispose();
    }//GEN-LAST:event_bt_cancelActionPerformed

 
  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JButton bt_cancel;
  private javax.swing.JButton bt_clear;
  private javax.swing.JCheckBox cb_games;
  private javax.swing.JCheckBox cb_screenshots;
  private javax.swing.JCheckBox cb_swf;
  private javax.swing.JLabel jLabel1;
  private javax.swing.JPanel jPanel1;
  private javax.swing.JProgressBar pr_games;
  private javax.swing.JProgressBar pr_screenshots;
  private javax.swing.JProgressBar pr_swf;
  // End of variables declaration//GEN-END:variables

  class DeleteSwf implements Runnable {

    private File[] files;
    private int total;
    private int deleted = 0;

    public DeleteSwf() {
      files = new File(Options.USER_DIR + Options.GAMES_DIR).listFiles(new FilenameFilter() {

        @Override
        public boolean accept(File dir, String name) {
          if (name.endsWith(".swf")) {
            return true;
          }
          return false;
        }
      });


    }

    @Override
    public void run() {
      if (cb_swf.isSelected()) {
        total = files.length;
        pr_swf.setString("0 out of " + total + " files checked");
        for (int i = 0; i < total; i++) {
          File file = files[i];
          pr_swf.setValue(((i + 1) * 100) / total);
          pr_swf.setString((i + 1) + " out of " + total + " files checked");
          String sql = "SELECT id FROM games WHERE  filename ='" + file.getName() + "'";
          try {
            ResultSet rs = Game.query(sql);
            if (!rs.next()) {
              file.delete();
              deleted++;
            }
          } catch (SQLException ex) {
            FlashGamesPlayer.logger.log(Level.SEVERE, null, ex);
          }
        }
        pr_swf.setString(total + " files checked, deleted: " + deleted);
      }
      if (cb_screenshots.isSelected()) {
        DeleteScr dscr = new DeleteScr();
        dscr.run();
      }
      if (cb_games.isSelected()) {
        DeleteGames dgms = new DeleteGames();
        dgms.run();
      }
    }
  }

  class DeleteScr implements Runnable {

    private File[] files;
    private int total;
    private int deleted = 0;
    ArrayList<Integer> screenshots = new ArrayList<Integer>();

    public DeleteScr() {
      files = new File(Options.USER_DIR + Options.SCREENSHOT_DIR).listFiles(new FilenameFilter() {

        @Override
        public boolean accept(File dir, String name) {
          String[] tokens = name.split("\\.");
          try {
            int id = Integer.parseInt(tokens[0]);
            screenshots.add(id);
            return true;
          } catch (NumberFormatException ex) {
            return false;
          }
        }
      });
      total = screenshots.size();
      pr_screenshots.setString("0 out of " + total + " files checked");

    }

    @Override
    public void run() {
      for (int i = 0; i < total; i++) {
        int id = screenshots.get(i);
        pr_screenshots.setValue(((i + 1) * 100) / total);
        pr_screenshots.setString((i + 1) + " out of " + total + " files checked");
        String sql = "SELECT id FROM games WHERE  id =" + id;
        try {
          ResultSet rs = Game.query(sql);
          if (!rs.next()) {
            new File(Options.USER_DIR + Options.SCREENSHOT_DIR + id + ".png").delete();
            deleted++;
          }
        } catch (SQLException ex) {
          FlashGamesPlayer.logger.log(Level.SEVERE, null, ex);
        }
      }
      pr_screenshots.setString(total + " files checked, deleted: " + deleted);
    }
  }

  class DeleteGames implements Runnable {

    private int total;
    private int deleted = 0;
    ArrayList<Game> games = new ArrayList<Game>();

    public DeleteGames() {
      games = Game.getAllGames();
      total = games.size();
      pr_games.setString("0 out of " + total + " games checked");

    }

    @Override
    public void run() {
      int r;
      for (int i = 0; i < total; i++) {
        Game game = games.get(i);
        pr_games.setValue(((i + 1) * 100) / total);
        pr_games.setString((i + 1) + " out of " + total + " games checked");
        if (!new File(Options.USER_DIR + Options.GAMES_DIR + game.getFilename()).isFile()) {
          try {
            r = Game.queryUpdate("DELETE FROM games WHERE id = " + game.getId());
            deleted++;
          } catch (SQLException ex) {
            FlashGamesPlayer.logger.log(Level.SEVERE, null, ex);
          }
        }
      }
      pr_games.setString(total + " games checked, deleted: " + deleted);
      FlashGamesPlayer.gamesTree.populateTree();
    }
  }
}
