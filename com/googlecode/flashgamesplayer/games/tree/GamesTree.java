/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * Tree.java
 *
 * Created on 21 Ιουν 2010, 10:56:02 πμ
 */
package com.googlecode.flashgamesplayer.games.tree;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.logging.Level;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import com.googlecode.flashgamesplayer.FlashGamesPlayer;
import com.googlecode.flashgamesplayer.database.Database;
import com.googlecode.flashgamesplayer.database.Game;
import com.googlecode.flashgamesplayer.database.Genre;
import com.googlecode.flashgamesplayer.games.GameForm;
import com.googlecode.flashgamesplayer.games.GamePanel;
import com.googlecode.flashgamesplayer.tools.GamesChangeListener;
import com.googlecode.flashgamesplayer.tools.MyMessages;
import java.awt.Point;
import java.awt.event.KeyEvent;
import java.awt.event.MouseEvent;
import javax.swing.JOptionPane;
import javax.swing.tree.TreePath;

/**
 *
 * @author ssoldatos
 */
public class GamesTree extends javax.swing.JPanel {

  public static final int GENRE = 0;
  public static final int PLAYED = 1;
  public static final int RATE = 2;
  public static final int INTERNET = 3;
  public static final String[] SORTS = {"Genre", "Played", "Rate", "Internet"};
  private static final long serialVersionUID = 345345636456L;
  DefaultTreeModel model = new GamesTreeModel(null);
  private boolean isSelected;
  private int sort = GENRE;

  /** Creates new form Tree */
  public GamesTree() {
    initComponents();
    tree.setCellRenderer(new GamesCellRenderer());
    addPropertyChangeListener(new GamesChangeListener());
    setVisible(true);

  }

  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    popup = new javax.swing.JPopupMenu();
    addGame = new javax.swing.JMenuItem();
    delete = new javax.swing.JMenuItem();
    scrollpane = new javax.swing.JScrollPane();
    tree = new javax.swing.JTree();

    popup.setComponentPopupMenu(popup);
    popup.setInvoker(scrollpane);

    addGame.setText("Add Game");
    addGame.setToolTipText("Add a new Game");
    addGame.setPreferredSize(new java.awt.Dimension(140, 22));
    addGame.setRolloverEnabled(true);
    addGame.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        addGameActionPerformed(evt);
      }
    });
    popup.add(addGame);

    delete.setText("Delete");
    delete.setToolTipText("Delete");
    delete.setPreferredSize(new java.awt.Dimension(140, 22));
    delete.setRolloverEnabled(true);
    delete.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        deleteActionPerformed(evt);
      }
    });
    popup.add(delete);

    tree.setBorder(javax.swing.BorderFactory.createEmptyBorder(5, 5, 5, 5));
    tree.setModel(model);
    tree.addMouseListener(new java.awt.event.MouseAdapter() {
      public void mouseReleased(java.awt.event.MouseEvent evt) {
        treeMouseReleased(evt);
      }
    });
    tree.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
      public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
        treeValueChanged(evt);
      }
    });
    tree.addKeyListener(new java.awt.event.KeyAdapter() {
      public void keyReleased(java.awt.event.KeyEvent evt) {
        treeKeyReleased(evt);
      }
    });
    scrollpane.setViewportView(tree);

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
    this.setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addComponent(scrollpane, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 140, Short.MAX_VALUE)
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addComponent(scrollpane, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
    );
  }// </editor-fold>//GEN-END:initComponents

  private void treeValueChanged(javax.swing.event.TreeSelectionEvent evt) {//GEN-FIRST:event_treeValueChanged
    if (isSelected) {
      DefaultMutableTreeNode node = (DefaultMutableTreeNode) tree.getLastSelectedPathComponent();
      if (node != null) {
        if (node.isLeaf()) {
          if (node.getUserObject() instanceof Game) {
            Game game = (Game) node.getUserObject();
            if (FlashGamesPlayer.isInternet || game.isInternet() == Game.NO_INTERNET) {
              firePropertyChange(GamesChangeListener.GAME_SELECTED, FlashGamesPlayer.gamePanel.getGame(), game);
            }
          }
        }
      }
    }
  }//GEN-LAST:event_treeValueChanged

  private void treeMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_treeMouseReleased
    DefaultMutableTreeNode node;
    if (evt.getButton() == MouseEvent.BUTTON1) {
      Point p = evt.getPoint();
      TreePath path = tree.getClosestPathForLocation(p.x, p.y);
      if (tree.getPathBounds(path).contains(p)) {
        isSelected = true;
        tree.setSelectionPath(path);
        treeValueChanged(null);
      }
    } else if (evt.getButton() == MouseEvent.BUTTON3) {
      Point p = evt.getPoint();
      popup.show(scrollpane, p.x, p.y);
      TreePath path = tree.getClosestPathForLocation(p.x, p.y);
      if (tree.getPathBounds(path).contains(p)) {
        isSelected = false;
        tree.setSelectionPath(path);
      }
      node = null;
      if (tree.getSelectionCount() > 0) {
        node = (DefaultMutableTreeNode) path.getLastPathComponent();
        delete.setEnabled(true);
        if (tree.getModel().isLeaf(node)) {
          Game game = (Game) node.getUserObject();
          delete.setText("Delete " + game.getTitle());
        } else {
          if (node.getUserObject() instanceof Genre) {
            Genre genre = (Genre) node.getUserObject();
            if (node.isLeaf()) {
              delete.setText("Delete " + node);
            } else {
              delete.setText("Delete");
              delete.setEnabled(false);
            }
          } else {
            delete.setText("Delete");
            delete.setEnabled(false);
          }
        }
      } else {
        delete.setText("Delete");
        delete.setEnabled(false);
      }
    }
  }//GEN-LAST:event_treeMouseReleased

  private void addGameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addGameActionPerformed
    new GameForm();
  }//GEN-LAST:event_addGameActionPerformed

  private void deleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteActionPerformed
    TreePath path = tree.getSelectionPath();
    DefaultMutableTreeNode node = (DefaultMutableTreeNode) path.getLastPathComponent();
    Object obj = node.getUserObject();
    if (obj instanceof Game) {
      Game game = (Game) obj;
      System.out.println(game.getId());
    } else if (obj instanceof Genre) {
      Genre genre = (Genre) obj;
      System.out.println(genre.getId());
    }
  }//GEN-LAST:event_deleteActionPerformed

  private void treeKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_treeKeyReleased
    TreePath path = tree.getSelectionPath();
    DefaultMutableTreeNode node = (DefaultMutableTreeNode) path.getLastPathComponent();
    Object obj = node.getUserObject();
    if (obj instanceof Game) {
      Game game = (Game) obj;
      if (evt.getKeyCode() == KeyEvent.VK_F2) {
        new GameForm(game);
      } else if (evt.getKeyCode() == KeyEvent.VK_DELETE) {
        if (MyMessages.question("Delete Game", "Really delete the game : " + game.getTitle()) == JOptionPane.OK_OPTION) {
          if (game.delete()) {
            firePropertyChange(GamesChangeListener.GAME_DELETED, game, null);
          } else {
            MyMessages.error("Error", "Could not delete the game");
          }
        }
      }
    }
  }//GEN-LAST:event_treeKeyReleased
  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JMenuItem addGame;
  private javax.swing.JMenuItem delete;
  private javax.swing.JPopupMenu popup;
  private javax.swing.JScrollPane scrollpane;
  private javax.swing.JTree tree;
  // End of variables declaration//GEN-END:variables

  public void populateTree(int sort) {
    setSort(sort);
    TreePath selection = null;
    if (tree.getSelectionPath() != null) {
      selection = tree.getSelectionPath().getParentPath();
    }
    ArrayList<GameNode> list = new ArrayList<GameNode>();
    String groupAndOrder = "";
    switch (sort) {
      case GENRE:
        groupAndOrder = "GROUP BY gen.id, g.id ORDER BY gen.id";
        break;
      case PLAYED:
        groupAndOrder = "ORDER BY g.played DESC";
        break;
      case RATE:
        groupAndOrder = "GROUP BY g.rate, g.id ORDER BY g.rate DESC";
        break;
      case INTERNET:
        groupAndOrder = "GROUP BY g.internet, g.id ORDER BY g.internet DESC";
        break;
    }
    String sql = "SELECT g.id AS id FROM games  g "
        + "INNER JOIN genres gen ON g.genre_id = gen.id " + groupAndOrder;
    try {
      ResultSet rs = new Database().getStmt().executeQuery(sql);
      while (rs.next()) {
        Game game = Game.getGameById(rs.getInt("id"));
        Object category = null;
        switch (sort) {
          case GENRE:
            category = Genre.getGenreById(game.getGenre_id()).getGenre();
            break;
          case PLAYED:
            category = game.getPlayed();
            break;
          case RATE:
            category = game.getRate();
            break;
          case INTERNET:
            category = game.isInternet() == Game.INTERNET ? "Internet" : "No Internet";
            break;
        }

        list.add(new GameNode(category, game));
      }
      DefaultMutableTreeNode root = createTree(list);
      model = new DefaultTreeModel(root);
      tree.setModel(model);
      if (selection != null) {
        tree.expandPath(selection);
      }
    } catch (SQLException ex) {
      FlashGamesPlayer.logger.log(Level.SEVERE, null, ex);
    }
  }

  private DefaultMutableTreeNode createTree(ArrayList<GameNode> list) {
    DefaultMutableTreeNode root = new DefaultMutableTreeNode("Games");
    Object prevNodeCategory = "";
    DefaultMutableTreeNode curNode = null;
    for (Iterator<GameNode> it = list.iterator(); it.hasNext();) {
      GameNode gameNode = it.next();
      if (!gameNode.category.equals(prevNodeCategory)) {
        curNode = new DefaultMutableTreeNode(gameNode.category);
        root.add(curNode);
        curNode.add(new DefaultMutableTreeNode(gameNode.game));
        prevNodeCategory = gameNode.category;
      } else {
        curNode.add(new DefaultMutableTreeNode(gameNode.game));
      }
    }
    return root;

  }

  public void populateTree() {
    populateTree(getSort());
  }

  /**
   * @return the sort
   */
  public int getSort() {
    return sort;
  }

  /**
   * @param sort the sort to set
   */
  public void setSort(int sort) {
    this.sort = sort;
  }

  class GameNode {

    private final Object category;
    private final Game game;

    public GameNode(Object category, Game g) {
      this.category = category;
      this.game = g;
    }
  }
}
