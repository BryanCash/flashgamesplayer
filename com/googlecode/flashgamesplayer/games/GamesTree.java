/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * Tree.java
 *
 * Created on 21 Ιουν 2010, 10:56:02 πμ
 */
package com.googlecode.flashgamesplayer.games;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.logging.Level;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import com.googlecode.flashgamesplayer.FlashGamesPlayer;
import com.googlecode.flashgamesplayer.database.Database;
import com.googlecode.flashgamesplayer.database.Game;
import com.googlecode.flashgamesplayer.tools.GamesChangeListener;

/**
 *
 * @author ssoldatos
 */
public class GamesTree extends javax.swing.JPanel {

  private static final long serialVersionUID = 345345636456L;
  private DefaultMutableTreeNode root = new DefaultMutableTreeNode("Games");
  private ArrayList<GameNode> list;

  /** Creates new form Tree */
  public GamesTree() {
    initComponents();
    addPropertyChangeListener(new GamesChangeListener());
    setVisible(true);
  }

  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    jScrollPane1 = new javax.swing.JScrollPane();
    tree = new javax.swing.JTree();

    javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("root");
    tree.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
    tree.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
      public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
        treeValueChanged(evt);
      }
    });
    jScrollPane1.setViewportView(tree);

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
    this.setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 140, Short.MAX_VALUE)
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
    );
  }// </editor-fold>//GEN-END:initComponents

  private void treeValueChanged(javax.swing.event.TreeSelectionEvent evt) {//GEN-FIRST:event_treeValueChanged
    DefaultMutableTreeNode node = (DefaultMutableTreeNode) tree.getLastSelectedPathComponent();
    if (node != null) {
      if (node.isLeaf()) {
        if (node.getUserObject() instanceof Game) {
          Game game = (Game) node.getUserObject();
          firePropertyChange(GamesChangeListener.GAME_SELECTED, FlashGamesPlayer.gamePanel.getGame(), game);
          FlashGamesPlayer.gamePanel.setGame(game);
        }
      }
    }
  }//GEN-LAST:event_treeValueChanged
  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JScrollPane jScrollPane1;
  private javax.swing.JTree tree;
  // End of variables declaration//GEN-END:variables

  public void populateTree() {
    list = new ArrayList<GameNode>();
    //GameNode gNode = new GameNode("Games",null);
    //list.add(gNode);
    String sql = "SELECT g.id AS id , gen.genre AS genre FROM games  g INNER JOIN genres gen ON g.genre_id = gen.id GROUP BY gen.id ORDER BY gen.id";
    try {
      ResultSet rs = new Database().getStmt().executeQuery(sql);
      while (rs.next()) {
        Game g = Game.getGameById(rs.getInt("id"));
        String genre = rs.getString("genre");
        list.add(new GameNode(genre, g));
      }
      createTree(list);
      tree.setModel(new DefaultTreeModel(root));
    } catch (SQLException ex) {
      FlashGamesPlayer.logger.log(Level.SEVERE, null, ex);
    }
  }

  private void createTree(ArrayList<GameNode> list) {
    String prevNodeGenre = "";
    DefaultMutableTreeNode curNode = null;
    for (Iterator<GameNode> it = list.iterator(); it.hasNext();) {
      GameNode gameNode = it.next();
      if (!gameNode.genre.equals(prevNodeGenre)) {
        curNode = new DefaultMutableTreeNode(gameNode.genre);
        getRoot().add(curNode);
        curNode.add(new DefaultMutableTreeNode(gameNode.game));
      } else {
        curNode.add(new DefaultMutableTreeNode(gameNode.game));
      }
    }
  }

  /**
   * @return the root
   */
  public DefaultMutableTreeNode getRoot() {
    return root;
  }

  /**
   * @param root the root to set
   */
  public void setRoot(DefaultMutableTreeNode root) {
    this.root = root;
  }

  class GameNode {

    private final String genre;
    private final Game game;

    public GameNode(String genre, Game g) {
      this.genre = genre;
      this.game = g;
    }
  }
}
